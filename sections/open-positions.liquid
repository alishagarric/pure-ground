{% style %}
    #Open-positions-{{ section.id }} {
      --topSpacingRatio: {{section.settings.top_spacing}} / 100;
      --bottomSpacingRatio: {{section.settings.bottom_spacing}} / 100;
    }
{% endstyle %}


{% comment %} Make sure user added positions {% endcomment %}

  {% comment %} Variables needed to gather department nav data {% endcomment %}
  {% assign default_department = "All" %}
  {% assign departments = default_department %}

  <div id="Open-positions-{{ section.id }}" class="open-positions color-{{section.settings.color_scheme}}">

   <div class="open-positions__headline-content">
    {% if section.settings.heading %}
      <h2 class="open-positions__heading h5">{{ section.settings.heading }}</h2>
    {% endif %}
    
      {% if section.settings.text %}
         <div class="open-positions__content__text __article-txt">{{ section.settings.text }}</div>
      {% endif %}
   </div>

    
    <div class="open-positions__content">
        <div class="open-positions__departments">
        <span>Departments</span>
      </div>

      <div class="open-positions__container">
      {% if section.blocks.size > 0 %}
         {% comment %} Loop through positions {% endcomment %}
         {%- for block in section.blocks -%}
         {% if block.settings.heading %}

            {% comment %} Assign department variables {% endcomment %}
            {% assign department = default_department %}
            {% if block.settings.department %}
               {% assign department = block.settings.department %}
            {% endif %}
            {% assign department_handle = department | handleize %}

            {% comment %} Output position {% endcomment %}
               <div class="open-positions__position {% if department == default_department %}__active{% endif %}" data-department="{{ department_handle }}">
                  <div class="open-positions__position--top">
                     <h3 class="h5">{{block.settings.heading}}</h3>

                     {% if block.settings.button_link and block.settings.button_label %}
                        <a class="open-positions__position__btn btn __btn-clr-{{block.settings.button_color}}" {% if block.settings.button_link == blank %} role="link" aria-disabled="true"{% else %} href="{{ block.settings.button_link }}"{% endif %} {{ block.shopify_attributes }}>
                           {{ block.settings.button_label | escape }}
                        </a>
                     {% endif %}
                  </div>
                  <div class="open-positions__position--bottom">
                     <div>
                        {% render 'svg-location' %}
                        <span>{{block.settings.location}}</span>
                     </div>

                     <toggle-modal class="open-positions__modal" data-type="container">
                        <p class="open-positions__modal__label">{{block.settings.details}}</p>
                     </toggle-modal>{% render 'modal' %}
                  </div>
               </div>


            {% comment %} 
               Add position department to departments string, 
               which we will split into an array after the loop is completed 
            {% endcomment %}
            {% assign departments = departments | append: "$$$" | append: department %}
         {% endif %}
         {%- endfor -%}

         {% comment %} Split departments string into an array {% endcomment %}
         {% assign departments = departments | split: "$$$" | uniq %}

         {% comment %} 
         Output positions nav if there's more than 
         one department to navigate through 
         {% endcomment %}
         {% if departments.size > 1 %}
         <ul class="positions__nav">
            {%- for department in departments -%}
               {% assign department_handle = department | handleize %}

               {% comment %} Each nav item {% endcomment %}
               <li class="positions__nav__item">
                  {% comment %} Tag logic below sets listener on {% endcomment %}
                  <positions-button
                     class="positions__button caption {% if department == default_department %}__active{% endif %}"
                     data-department="{{ department_handle }}"
                  >
                     {{ department }}
                  </positions-button>
               </li>
            {%- endfor -%}
         </ul>
         {% endif %}
      {% endif %}
   </div>
  </div>

{% javascript %}

  class PositionsNavButton extends HTMLElement {
    constructor() {
      super();

      this.setupListener();
    }

    //Add a on click listener to every position department nav button
    setupListener() {
      this.addEventListener('click', this.updateDepartment.bind(this));
    }

    //on department nav button click, updates what is active
    updateDepartment() {

      //parent element for this section
      var thisSection = this.parentNode.parentNode.parentNode;
      //clicked on item's department
      var department = this.getAttribute('data-department');
      //all positions in this section
      var faqItems = thisSection.querySelectorAll('.positions__position');
      //all nav buttons
      var faqNavItems = thisSection.querySelectorAll('.positions__button');

      //remove or add active class on positions
      for ( var i = 0; i < faqItems.length; i++ ){
        if (faqItems[i].getAttribute('data-department') == department ){
          faqItems[i].classList.add('__active');
        }
        else {
          faqItems[i].classList.remove('__active');
        }
      }

      //remove active class on nav buttons
      for (var i = 0; i < faqNavItems.length; i++ ) {
        faqNavItems[i].classList.remove('__active');
      }

      //add active class on clicked item
      this.classList.add('__active');
    }
  }

  customElements.define('positions-button', PositionsNavButton);

  class ToggleModal extends HTMLElement {
    constructor() {
      super();

      this.setupListener();
    }

    setupListener() {
      this.addEventListener('click', this.toggleModal.bind(this));
    }

    toggleModal() {
      var modal = this.getAttribute('data-type') == "modal" ? this : this.nextElementSibling;
      modal.classList.toggle("__active");
    }
  }

  customElements.define('toggle-modal', ToggleModal);

{% endjavascript %}


{% schema %}
{
   "name":"Positions",
   "tag":"section",
   "class":"section",
   "settings":[
      {
         "type":"header",
         "content":"Text Content"
      },
      {
         "type":"text",
         "label":"Heading",
         "id":"heading",
         "default": "Open Positions"
      },
      {
         "type":"richtext",
         "label":"Text Content",
         "id":"text",
         "default": "<p>Weâ€™re looking for people to join the team who are as excited as we are to build positive global impact of supporting of customers, suppliers and network of growers and partners around the world. </p>"
      },
      {
         "type":"header",
         "content":"Settings"
      },
      {
         "type":"select",
         "id":"color_scheme",
         "options":[
            {
               "value":"cream",
               "label":"Cream (Default)"
            },
            {
               "value":"dark-cream",
               "label":"Dark Cream"
            },
            {
               "value":"grass",
               "label":"Grass"
            },
            {
               "value":"sun",
               "label":"Sun"
            },
            {
               "value":"ground",
               "label":"Ground"
            },
            {
               "value":"sky",
               "label":"Sky"
            },
            {
               "value":"tan",
               "label":"Tan"
            }
         ],
         "default":"cream",
         "label":"Color Scheme"
      },
      {
         "type":"range",
         "id":"top_spacing",
         "min":0,
         "max":100,
         "step":10,
         "unit":"%",
         "label":"Top Spacing",
         "default":50
      },
      {
         "type":"range",
         "id":"bottom_spacing",
         "min":0,
         "max":100,
         "step":10,
         "unit":"%",
         "label":"Bottom Spacing",
         "default":50
      }
   ],
   "blocks":[
      {
         "name":"Position",
         "type":"position",
         "settings":[
            {
               "type":"header",
               "content":"Text Content"
            },
            {
               "type":"text",
               "id":"heading",
               "label":"Title"
            },
            {
               "type":"text",
               "id":"location",
               "label":"Location"
            },
            {
               "type":"richtext",
               "id":"details",
               "label":"Details"
            },
            {
               "type":"header",
               "content":"Button"
            },
            {
               "type":"text",
               "id":"button_label",
               "default":"Apply Now",
               "label":"Button Label"
            },
            {
               "type":"url",
               "id":"button_link",
               "label":"Button Link"
            },
            {
               "type":"select",
               "id":"button_color",
               "label":"Button Color",
               "default":"default",
               "options":[
                  {
                     "value":"default",
                     "label":"Default"
                  },
                  {
                     "value":"cream",
                     "label":"Cream"
                  },
                  {
                     "value":"dark-cream",
                     "label":"Dark Cream"
                  },
                  {
                     "value":"grass",
                     "label":"Grass"
                  },
                  {
                     "value":"sun",
                     "label":"Sun"
                  },
                  {
                     "value":"ground",
                     "label":"Ground"
                  },
                  {
                     "value":"sky",
                     "label":"Sky"
                  },
                  {
                     "value":"tan",
                     "label":"Tan"
                  }
               ]
            },
            {
              "type": "text",
              "id": "department",
              "label": "Department",
              "default": "All",
              "info": "You can categorize your positions into departments like 'Distribution' or 'Marketing'. If no department is written, this question will be cateorized as 'All'. The ability to navigate between departments will only display if there are two or more departments in this section."
            }
         ]
      }
   ],
   "presets":[
      {
         "name":"Positions"
      }
   ]
}
{% endschema %}
